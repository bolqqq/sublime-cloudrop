{
	"scope": "source.lua - variable.other.lua",

	"completions":
	[
		"lua",
// Callback
		{ "trigger": "Callback.Bind", "contents": "Callback.Bind('${1:string szCallback}', function() ${2:object arg2} end)" },
		{ "trigger": "Callback.Unbind", "contents": "Callback.Unbind('${1:string szCallback}', function() ${2:object arg2} end)" },
		{ "trigger": "Callback.GetCallbacks", "contents": "Callback.GetCallbacks(${1:string szCallback})" },
		{ "trigger": "Callback.Trigger", "contents": "Callback.Trigger(${1:string szCallback}, ${2:object param1})" },
// Core
		{ "trigger": "Core.GetBuildDate", "contents": "Core.GetBuildDate()" },
		{ "trigger": "Core.GetTickCount", "contents": "Core.GetTickCount()" },
		{ "trigger": "Core.GetUser", "contents": "Core.GetUser()" },
		{ "trigger": "Core.OutputDebugString", "contents": "Core.OutputDebugString(${1:string szOutput})" },
// Core - Console
		{ "trigger": "Core.Console.GetPos", "contents": "Core.Console.GetPos()" },
		{ "trigger": "Core.Console.Hide", "contents": "Core.Console.Hide()" },
		{ "trigger": "Core.Console.SetPos", "contents": "Core.Console.SetPos(${1:unsinged int x}, ${2:unsinged int y})" },
		{ "trigger": "Core.Console.Show", "contents": "Core.Console.Show()" },
// Documentation
		{ "trigger": "Documentation.Generate", "contents": "Documentation.Generate(${1:object arg1})" },
// Geometry
// Geometry - Clipper
		{ "trigger": "Geometry.Clipper.AddClip", "contents": "Geometry.Clipper.AddClip(${1:Polygons arg2}, ${2:bool arg3})" },
		{ "trigger": "Geometry.Clipper.AddPolygon", "contents": "Geometry.Clipper.AddPolygon(${2:Polygon PolyTyp}, ${3:enum ClipperLib::PolyType arg3}, ${4:bool arg4})" },
		{ "trigger": "Geometry.Clipper.AddPolygons", "contents": "Geometry.Clipper.AddPolygons(${2:Polygons PolyTyp}, ${3:enum ClipperLib::PolyType arg3}, ${4:bool arg4})" },
		{ "trigger": "Geometry.Clipper.AddSubject", "contents": "Geometry.Clipper.AddSubject(${2:Polygon arg2}, ${3:bool arg3})" },
		{ "trigger": "Geometry.Clipper.Clear", "contents": "Geometry.Clipper.Clear()" },
		{ "trigger": "Geometry.Clipper.Execute", "contents": "Geometry.Clipper.Execute(${2:int ClypType}, ${3:enum ClipperLib::PolyFillType arg3}, ${4:enum ClipperLib::PolyFillType arg4})" },
// Geometry - Matrix4
		{ "trigger": "Geometry.Matrix4.At", "contents": "Geometry.Matrix4.At(${1:unsigned int arg2}, ${2:unsigned int arg3})"},
		{ "trigger": "Geometry.Matrix4.Decompose", "contents": "Geometry.Matrix4.Decompose(${1:Matrix4 arg2})"},
		{ "trigger": "Geometry.Matrix4.Determinant", "contents": "Geometry.Matrix4.Determinant()"},
		{ "trigger": "Geometry.Matrix4.Inverse", "contents": "Geometry.Matrix4.Inverse(${1:Matrix4 arg2})"},
		{ "trigger": "Geometry.Matrix4.MultiplyTranspose", "contents": "Geometry.Matrix4.MultiplyTranspose(${1:Matrix4 arg2})"},
		{ "trigger": "Geometry.Matrix4.Transpose", "contents": "Geometry.Matrix4.Transpose()"},
		{ "trigger": "Geometry.Matrix4.AffineTransformation", "contents": "Geometry.Matrix4.AffineTransformation(${1:float Scaling}, ${2:object RotationCenter}, ${3:object Rotation}, ${4:object Translation})"},
		{ "trigger": "Geometry.Matrix4.AffineTransformation2D", "contents": "Geometry.Matrix4.AffineTransformation2D(${1:float Scaling}, ${2:object RotationCenter}, ${3:float Rotation}, ${4:object Translation})"},
		{ "trigger": "Geometry.Matrix4.Copy", "contents": "Geometry.Matrix4.Copy(${1:object o})"},
		{ "trigger": "Geometry.Matrix4.Identity", "contents": "Geometry.Matrix4.Identity()"},
		{ "trigger": "Geometry.Matrix4.LookAtLH", "contents": "Geometry.Matrix4.LookAtLH(${1:Vector3 Eye}, ${2:Vector3 At}, ${3:Vector3 Up})"},
		{ "trigger": "Geometry.Matrix4.LookAtRH", "contents": "Geometry.Matrix4.LookAtRH(${1:Vector3 Eye}, ${2:Vector3 At}, ${3:Vector3 Up})"},
		{ "trigger": "Geometry.Matrix4.OrthoLH", "contents": "Geometry.Matrix4.OrthoLH(${1:float w}, ${2:float h}, ${3:float zn}, ${4:float zf})"},
		{ "trigger": "Geometry.Matrix4.OrthoRH", "contents": "Geometry.Matrix4.OrthoRH(${1:float w}, ${2:float h}, ${3:float zn}, ${4:float zf})"},
		{ "trigger": "Geometry.Matrix4.OrthoOffCenterLH", "contents": "Geometry.Matrix4.OrthoOffCenterLH(${1:float l}, ${2:float r}, ${3:float b}, ${4:float t}, ${5:float zn}, ${6:float zf})"},
		{ "trigger": "Geometry.Matrix4.OrthoOffCenterRH", "contents": "Geometry.Matrix4.OrthoOffCenterRH(${1:float l}, ${2:float r}, ${3:float b}, ${4:float t}, ${5:float zn}, ${6:float zf})"},
		{ "trigger": "Geometry.Matrix4.PerspectiveFovLH", "contents": "Geometry.Matrix4.PerspectiveFovLH(${1:float fovy}, ${2:float Aspect}, ${3:float zn}, ${4:float zf})"},
		{ "trigger": "Geometry.Matrix4.PerspectiveFovRH", "contents": "Geometry.Matrix4.PerspectiveFovRH(${1:float fovy}, ${2:float Aspect}, ${3:float zn}, ${4:float zf})"},
		{ "trigger": "Geometry.Matrix4.PerspectiveLH", "contents": "Geometry.Matrix4.PerspectiveLH(${1:float w}, ${2:float h}, ${3:float zn}, ${4:float zf})"},
		{ "trigger": "Geometry.Matrix4.PerspectiveRH", "contents": "Geometry.Matrix4.PerspectiveRH(${1:float w}, ${2:float h}, ${3:float zn}, ${4:float zf})"},
		{ "trigger": "Geometry.Matrix4.PerspectiveOffCenterLH", "contents": "Geometry.Matrix4.PerspectiveOffCenterLH(${1:float l}, ${2:float r}, ${3:float b}, ${4:float t}, ${5:float zn}, ${6:float zf})"},
		{ "trigger": "Geometry.Matrix4.PerspectiveOffCenterRH", "contents": "Geometry.Matrix4.PerspectiveOffCenterRH(${1:float l}, ${2:float r}, ${3:float b}, ${4:float t}, ${5:float zn}, ${6:float zf})"},
		{ "trigger": "Geometry.Matrix4.Reflect", "contents": "Geometry.Matrix4.Reflect(${1:Vector4 Plane})"},
		{ "trigger": "Geometry.Matrix4.RotationAxis", "contents": "Geometry.Matrix4.RotationAxis(${1:Vector3 V}, ${2:float Angle})"},
		{ "trigger": "Geometry.Matrix4.RotationQuaternion", "contents": "Geometry.Matrix4.RotationQuaternion(${1:Quaternion Q})"},
		{ "trigger": "Geometry.Matrix4.RotationX", "contents": "Geometry.Matrix4.RotationX(${1:float Angle})"},
		{ "trigger": "Geometry.Matrix4.RotationY", "contents": "Geometry.Matrix4.RotationY(${1:float Angle})"},
		{ "trigger": "Geometry.Matrix4.RotationZ", "contents": "Geometry.Matrix4.RotationZ(${1:float Angle})"},
		{ "trigger": "Geometry.Matrix4.RotationYawPitchRoll", "contents": "Geometry.Matrix4.RotationYawPitchRoll(${1:float Yaw}, ${2:float Pitch}, ${3:float Roll})"},
		{ "trigger": "Geometry.Matrix4.Scaling", "contents": "Geometry.Matrix4.Scaling(${1:float sx}, ${2:float sy}, ${3:float sz})"},
		{ "trigger": "Geometry.Matrix4.Shadow", "contents": "Geometry.Matrix4.Shadow(${1:Vector4 Light}, ${2:Vector4 Plane}})"},
		{ "trigger": "Geometry.Matrix4.Transformation", "contents": "Geometry.Matrix4.Transformation(${1:Vector3 ScalingCenter}, ${2:Quaternion ScalingRotation}, ${3:Vector3 Scaling}, ${4:Vector3 RotationCenter}, ${5:Quaternion Rotation}, ${6:Vector3 Translation})"},
		{ "trigger": "Geometry.Matrix4.Transformation2D", "contents": "Geometry.Matrix4.Transformation2D(${1:Vector2 ScalingCenter}, ${2:float ScalingRotation}, ${3:Vector2 Scaling}, ${4:Vector2 RotationCenter}, ${5:float Rotation}, ${6:Vector2 Translation})"},
		{ "trigger": "Geometry.Matrix4.Translation", "contents": "Geometry.Matrix4.Translation(${1:float x}, ${2:float y}, ${3:float z})"},
// Geometry - Point
		{ "trigger": "Geometry.Point.Point", "contents": "Geometry.Point.Point(${1:int x}, ${2:int y})"},
		{ "trigger": "Geometry.Point.IsInside", "contents": "Geometry.Point.IsInside(${1:Polygon poly})"},
		{ "trigger": "Geometry.Point.ToVector", "contents": "Geometry.Point.ToVector(${1:int x})"},
// Geometry - Polygon
		{ "trigger": "Geometry.Polygon.Add", "contents": "Geometry.Polygon.Add(${1:int x}, ${2:int y}, ${3:int m})"},
		{ "trigger": "Geometry.Polygon.Clean", "contents": "Geometry.Polygon.Clean(${1:double arg2})"},
		{ "trigger": "Geometry.Polygon.Clear", "contents": "Geometry.Polygon.Clear()"},
		{ "trigger": "Geometry.Polygon.DrawOutline", "contents": "Geometry.Polygon.DrawOutline(${1:float width}, ${2:Graphics.Color color})"},
		{ "trigger": "Geometry.Polygon.DrawOutline3D", "contents": "Geometry.Polygon.DrawOutline3D(${1:float width}, ${2:Graphics.Color color})"},
		{ "trigger": "Geometry.Polygon.Get", "contents": "Geometry.Polygon.Get(${1:int index})"},
		{ "trigger": "Geometry.Polygon.MinkowskiDiff", "contents": "Geometry.Polygon.MinkowskiDiff(${1:Polygon other}, ${2:bool pathIsClosed})"},
		{ "trigger": "Geometry.Polygon.MinkowskiSum", "contents": "Geometry.Polygon.MinkowskiSum(${1:Polygon pattern}, ${2:bool pathIsClosed})"},
		{ "trigger": "Geometry.Polygon.Reserve", "contents": "Geometry.Polygon.Reserve(${1:int x})"},
		{ "trigger": "Geometry.Polygon.Reverse", "contents": "Geometry.Polygon.Reverse()"},
		{ "trigger": "Geometry.Polygon.Set", "contents": "Geometry.Polygon.Set(${1:int index}, ${2:Point value})"},
		{ "trigger": "Geometry.Polygon.Simplify", "contents": "Geometry.Polygon.Simplify(${1:enum ClipperLib::PolyFillType arg2})"},
// Geometry - Polygons
		{ "trigger": "Geometry.Polygons.Add", "contents": "Geometry.Polygons.Add(${1:table t/Polygon poly})"},
		{ "trigger": "Geometry.Polygons.Clean", "contents": "Geometry.Polygons.Clean(${1:double arg2})"},
		{ "trigger": "Geometry.Polygons.Clear", "contents": "Geometry.Polygons.Clear()"},
		{ "trigger": "Geometry.Polygons.DrawOutline", "contents": "Geometry.Polygons.DrawOutline(${1:float width}, ${2:Graphics.Color color})"},
		{ "trigger": "Geometry.Polygons.DrawOutline3D", "contents": "Geometry.Polygons.DrawOutline3D(${1:float width}, ${2:Graphics.Color color})"},
		{ "trigger": "Geometry.Polygons.Get", "contents": "Geometry.Polygons.Get(${1:int index})"},
		{ "trigger": "Geometry.Polygons.MinkowskiDiff", "contents": "Geometry.Polygons.MinkowskiDiff(${1:Polygon other}, ${2:bool pathIsClosed})"},
		{ "trigger": "Geometry.Polygons.MinkowskiSum", "contents": "Geometry.Polygons.MinkowskiSum(${1:Polygon pattern}, ${2:bool pathIsClosed})"},
		{ "trigger": "Geometry.Polygons.Offset", "contents": "Geometry.Polygons.Offset(${1:double delta}, ${2:enum ClipperLib::JoinType arg3}, ${3:enum ClipperLib::EndType_ arg4}, ${4:double miter_limit})"},
		{ "trigger": "Geometry.Polygons.Reserve", "contents": "Geometry.Polygons.Reserve(${1:int x})"},
		{ "trigger": "Geometry.Polygons.Reverse", "contents": "Geometry.Polygons.Reverse()"},
		{ "trigger": "Geometry.Polygons.Set", "contents": "Geometry.Polygons.Set(${1:int index}, ${2:Polygon value})"},
		{ "trigger": "Geometry.Polygons.Simplify", "contents": "Geometry.Polygons.Simplify(${1:enum ClipperLib::PolyFillType arg2})"},
// Geometry - Quaternion
		{ "trigger": "Geometry.Quaternion.BaryCentric", "contents": "Geometry.Quaternion.BaryCentric(${1:Quaternion Q2}, ${2:Quaternion Q3}, ${3:float f}), ${4:float g})"},
		{ "trigger": "Geometry.Quaternion.Conjugate", "contents": "Geometry.Quaternion.Conjugate()"},
		{ "trigger": "Geometry.Quaternion.DistanceTo", "contents": "Geometry.Quaternion.DistanceTo(${1:Quaternion Q2})"},
		{ "trigger": "Geometry.Quaternion.Exp", "contents": "Geometry.Quaternion.Exp()"},
		{ "trigger": "Geometry.Quaternion.Inverse", "contents": "Geometry.Quaternion.Inverse()"},
		{ "trigger": "Geometry.Quaternion.Length", "contents": "Geometry.Quaternion.Length()"},
		{ "trigger": "Geometry.Quaternion.Ln", "contents": "Geometry.Quaternion.Ln()"},
		{ "trigger": "Geometry.Quaternion.Normalize", "contents": "Geometry.Quaternion.Normalize()"},
		{ "trigger": "Geometry.Quaternion.Slerp", "contents": "Geometry.Quaternion.Slerp(${1:Quaternion Q2}, ${2:float t})"},
		{ "trigger": "Geometry.Quaternion.Squad", "contents": "Geometry.Quaternion.Squad(${1:Quaternion A}, ${2:Quaternion B}, ${3:Quaternion C}, ${4:float t})"},
		{ "trigger": "Geometry.Quaternion.SquadSetup", "contents": "Geometry.Quaternion.SquadSetup(${1:Quaternion Q1}, ${2:Quaternion Q2}, ${3:Quaternion Q3})"},
		{ "trigger": "Geometry.Quaternion.ToAxisAngle", "contents": "Geometry.Quaternion.ToAxisAngle()"},
		{ "trigger": "Geometry.Quaternion.RotationAxis", "contents": "Geometry.Quaternion.RotationAxis(${1:Vector3 V}, ${2:float Angle})"},
		{ "trigger": "Geometry.Quaternion.RotationMatrix", "contents": "Geometry.Quaternion.RotationMatrix(${1:Matrix4 m})"},
		{ "trigger": "Geometry.Quaternion.RotationYawPitchRoll", "contents": "Geometry.Quaternion.RotationYawPitchRoll(${1:float Yaw}, ${2:float Pitch}, ${3:float Roll})"},
		{ "trigger": "Geometry.Quaternion.Copy", "contents": "Geometry.Quaternion.Copy(${1:object o})"},
		{ "trigger": "Geometry.Quaternion.Identity", "contents": "Geometry.Quaternion.Identity()"},
// Geometry - Vector2
		{ "trigger": "Geometry.Vector2.Angle", "contents": "Geometry.Vector2.Angle(${1:Vector2 v={0,0}})"},
		{ "trigger": "Geometry.Vector2.AngleDeg", "contents": "Geometry.Vector2.AngleDeg(${1:Vector2 v={0,0}})"},
		{ "trigger": "Geometry.Vector2.BaryCentric", "contents": "Geometry.Vector2.BaryCentric(${1:Vector2 v2}, ${2:Vector2 v3}, ${3:float f}, ${3:float g})"},
		{ "trigger": "Geometry.Vector2.CatmullRom", "contents": "Geometry.Vector2.CatmullRom(${1:Vector2 v1}, ${2:Vector2 v2}, ${3:Vector3 v3}, ${3:float s})"},
		{ "trigger": "Geometry.Vector2.CCW", "contents": "Geometry.Vector2.CCW(${1:Vector2 v2}, ${2:Vector2 v3})"},
		{ "trigger": "Geometry.Vector2.Cross", "contents": "Geometry.Vector2.Cross(${1:Vector2 v1})"},
		{ "trigger": "Geometry.Vector2.DistanceTo", "contents": "Geometry.Vector2.DistanceTo(${1:Vector2 other})"},
		{ "trigger": "Geometry.Vector2.Dot", "contents": "Geometry.Vector2.Dot(${1:Vector2 v2})"},
		{ "trigger": "Geometry.Vector2.Hermite", "contents": "Geometry.Vector2.Hermite(${1:Vector2 t1}, ${2:Vector2 v2}, ${3:Vector2 t2}, ${4:float s})"},
		{ "trigger": "Geometry.Vector2.Interception", "contents": "Geometry.Vector2.Interception(${1:Vector2 v2}, ${2:Vector2 v3}, ${3:Vector2 v4})"},
		{ "trigger": "Geometry.Vector2.IsIntersection", "contents": "Geometry.Vector2.IsIntersection(${1:Vector2 v2}, ${2:Vector2 v3}, ${3:Vector2 v4})"},
		{ "trigger": "Geometry.Vector2.IsPartOfLineSegment", "contents": "Geometry.Vector2.IsPartOfLineSegment(${1:Vector2 v1}, ${2:Vector2 v2})"},
		{ "trigger": "Geometry.Vector2.Length", "contents": "Geometry.Vector2.Length()"},
		{ "trigger": "Geometry.Vector2.Lerp", "contents": "Geometry.Vector2.Lerp(${1:Vector2 v2}, ${2:float s})"},
		{ "trigger": "Geometry.Vector2.LerpNormalize", "contents": "Geometry.Vector2.LerpNormalize(${1:Vector2 v2}, ${2:float s})"},
		{ "trigger": "Geometry.Vector2.Maximize", "contents": "Geometry.Vector2.Maximize(${1:Vector2 v1})"},
		{ "trigger": "Geometry.Vector2.Minimize", "contents": "Geometry.Vector2.Minimize(${1:Vector2 v1})"},
		{ "trigger": "Geometry.Vector2.Normalize", "contents": "Geometry.Vector2.Normalize()"},
		{ "trigger": "Geometry.Vector2.To2D", "contents": "Geometry.Vector2.To2D()"},
		{ "trigger": "Geometry.Vector2.To3D", "contents": "Geometry.Vector2.To3D()"},
		{ "trigger": "Geometry.Vector2.To4D", "contents": "Geometry.Vector2.To4D()"},
		{ "trigger": "Geometry.Vector2.ProjectOnLine", "contents": "Geometry.Vector2.ProjectOnLine(${1:Vector2 a}, ${2:Vector2 b})"},
		{ "trigger": "Geometry.Vector2.ProjectOnLineSegment", "contents": "Geometry.Vector2.ProjectOnLineSegment(${1:Vector2 a}, ${2:Vector2 b})"},
		{ "trigger": "Geometry.Vector2.Rotate", "contents": "Geometry.Vector2.Rotate(${1:float s})"},
		{ "trigger": "Geometry.Vector2.RotateDeg", "contents": "Geometry.Vector2.RotateDeg(${1:float s})"},
		{ "trigger": "Geometry.Vector2.Scale", "contents": "Geometry.Vector2.Scale(${1:float s})"},
		{ "trigger": "Geometry.Vector2.ToPoint", "contents": "Geometry.Vector2.ToPoint(${1:int x=0})"},
		{ "trigger": "Geometry.Vector2.ToTable", "contents": "Geometry.Vector2.ToTable()"},
		{ "trigger": "Geometry.Vector2.Transform", "contents": "Geometry.Vector2.Transform(${1:Matrix4 m})"},
		{ "trigger": "Geometry.Vector2.TransformCoord", "contents": "Geometry.Vector2.TransformCoord(${1:Matrix4 m})"},
		{ "trigger": "Geometry.Vector2.TransformNormal", "contents": "Geometry.Vector2.TransformNormal(${1:Matrix4 m})"},
		{ "trigger": "Geometry.Vector2.unpack", "contents": "Geometry.Vector2.unpack()"},
		{ "trigger": "Geometry.Vector2.BoundingSphere", "contents": "Geometry.Vector2.BoundingSphere(${1:object o})"},
		{ "trigger": "Geometry.Vector2.Copy", "contents": "Geometry.Vector2.Copy(${1:Vector2 v})"},
// Geometry - Vector3
		{ "trigger": "Geometry.Vector3.BaryCentric", "contents": "Geometry.Vector3.BaryCentric(${1:Vector3 v2}, ${2:Vector3 v3}, ${3:float f}, ${3:float g})"},
		{ "trigger": "Geometry.Vector3.CatmullRom", "contents": "Geometry.Vector3.CatmullRom(${1:Vector3 v1}, ${2:Vector3 v2}, ${3:Vector3 v3}, ${3:float s})"},
		{ "trigger": "Geometry.Vector3.CCW", "contents": "Geometry.Vector3.CCW(${1:Vector3 v2}, ${2:Vector3 v3})"},
		{ "trigger": "Geometry.Vector3.Cross", "contents": "Geometry.Vector3.Cross(${1:Vector3 v1})"},
		{ "trigger": "Geometry.Vector3.DistanceTo", "contents": "Geometry.Vector3.DistanceTo(${1:Vector3 other})"},
		{ "trigger": "Geometry.Vector3.Dot", "contents": "Geometry.Vector3.Dot(${1:Vector3 v2})"},
		{ "trigger": "Geometry.Vector3.Hermite", "contents": "Geometry.Vector3.Hermite(${1:Vector3 t1}, ${2:Vector3 v2}, ${3:Vector3 t2}, ${4:float s})"},
		{ "trigger": "Geometry.Vector3.Interception", "contents": "Geometry.Vector3.Interception(${1:Vector3 v2}, ${2:Vector3 v3}, ${3:Vector3 v4})"},
		{ "trigger": "Geometry.Vector3.IsIntersection", "contents": "Geometry.Vector3.IsIntersection(${1:Vector3 v2}, ${2:Vector3 v3}, ${3:Vector3 v4})"},
		{ "trigger": "Geometry.Vector3.IsPartOfLineSegment", "contents": "Geometry.Vector3.IsPartOfLineSegment(${1:Vector3 v1}, ${2:Vector3 v2})"},
		{ "trigger": "Geometry.Vector3.Length", "contents": "Geometry.Vector3.Length()"},
		{ "trigger": "Geometry.Vector3.Lerp", "contents": "Geometry.Vector3.Lerp(${1:Vector3 v2}, ${2:float s})"},
		{ "trigger": "Geometry.Vector3.LerpNormalize", "contents": "Geometry.Vector3.LerpNormalize(${1:Vector3 v2}, ${2:float s})"},
		{ "trigger": "Geometry.Vector3.Maximize", "contents": "Geometry.Vector3.Maximize(${1:Vector3 v1})"},
		{ "trigger": "Geometry.Vector3.Minimize", "contents": "Geometry.Vector3.Minimize(${1:Vector3 v1})"},
		{ "trigger": "Geometry.Vector3.Normalize", "contents": "Geometry.Vector3.Normalize()"},
		{ "trigger": "Geometry.Vector3.To2D", "contents": "Geometry.Vector3.To2D()"},
		{ "trigger": "Geometry.Vector3.To3D", "contents": "Geometry.Vector3.To3D()"},
		{ "trigger": "Geometry.Vector3.To4D", "contents": "Geometry.Vector3.To4D()"},
		{ "trigger": "Geometry.Vector3.ProjectOnLine", "contents": "Geometry.Vector3.ProjectOnLine(${1:Vector3 a}, ${2:Vector3 b})"},
		{ "trigger": "Geometry.Vector3.ProjectOnLineSegment", "contents": "Geometry.Vector3.ProjectOnLineSegment(${1:Vector3 a}, ${2:Vector3 b})"},
		{ "trigger": "Geometry.Vector3.Rotate", "contents": "Geometry.Vector3.Rotate(${1:float s})"},
		{ "trigger": "Geometry.Vector3.RotateDeg", "contents": "Geometry.Vector3.RotateDeg(${1:float s})"},
		{ "trigger": "Geometry.Vector3.Scale", "contents": "Geometry.Vector3.Scale(${1:float s})"},
		{ "trigger": "Geometry.Vector3.ToPoint", "contents": "Geometry.Vector3.ToPoint(${1:int x=0})"},
		{ "trigger": "Geometry.Vector3.ToTable", "contents": "Geometry.Vector3.ToTable()"},
		{ "trigger": "Geometry.Vector3.Transform", "contents": "Geometry.Vector3.Transform(${1:Matrix4 m})"},
		{ "trigger": "Geometry.Vector3.TransformCoord", "contents": "Geometry.Vector3.TransformCoord(${1:Matrix4 m})"},
		{ "trigger": "Geometry.Vector3.Project", "contents": "Geometry.Vector3.Project()"},
		{ "trigger": "Geometry.Vector3.TransformNormal", "contents": "Geometry.Vector3.TransformNormal(${1:Matrix4 m})"},
		{ "trigger": "Geometry.Vector3.Unproject", "contents": "Geometry.Vector3.Unproject()"},
		{ "trigger": "Geometry.Vector3.unpack", "contents": "Geometry.Vector3.unpack()"},
		{ "trigger": "Geometry.Vector3.BoundingSphere", "contents": "Geometry.Vector3.BoundingSphere(${1:object o})"},
		{ "trigger": "Geometry.Vector3.Copy", "contents": "Geometry.Vector3.Copy(${1:Vector3 v})"},
// Geometry - Vector4
		{ "trigger": "Geometry.Vector4.BaryCentric", "contents": "Geometry.Vector4.BaryCentric(${1:Vector4 v2}, ${2:Vector4 v3}, ${3:float f}, ${3:float g})"},
		{ "trigger": "Geometry.Vector4.CatmullRom", "contents": "Geometry.Vector4.CatmullRom(${1:Vector4 v1}, ${2:Vector4 v2}, ${3:Vector4 v3}, ${3:float s})"},
		{ "trigger": "Geometry.Vector4.Cross", "contents": "Geometry.Vector4.Cross(${1:Vector4 v1})"},
		{ "trigger": "Geometry.Vector4.DistanceTo", "contents": "Geometry.Vector4.DistanceTo(${1:Vector4 other})"},
		{ "trigger": "Geometry.Vector4.Dot", "contents": "Geometry.Vector4.Dot(${1:Vector4 v2})"},
		{ "trigger": "Geometry.Vector4.Hermite", "contents": "Geometry.Vector4.Hermite(${1:Vector4 t1}, ${2:Vector4 v2}, ${3:Vector4 t2}, ${4:float s})"},
		{ "trigger": "Geometry.Vector4.Interception", "contents": "Geometry.Vector4.Interception(${1:Vector4 v2}, ${2:Vector4 v3}, ${3:Vector4 v4})"},
		{ "trigger": "Geometry.Vector4.IsIntersection", "contents": "Geometry.Vector4.IsIntersection(${1:Vector4 v2}, ${2:Vector4 v3}, ${3:Vector4 v4})"},
		{ "trigger": "Geometry.Vector4.IsPartOfLineSegment", "contents": "Geometry.Vector4.IsPartOfLineSegment(${1:Vector4 v1}, ${2:Vector4 v2})"},
		{ "trigger": "Geometry.Vector4.Length", "contents": "Geometry.Vector4.Length()"},
		{ "trigger": "Geometry.Vector4.Lerp", "contents": "Geometry.Vector4.Lerp(${1:Vector4 v2}, ${2:float s})"},
		{ "trigger": "Geometry.Vector4.LerpNormalize", "contents": "Geometry.Vector4.LerpNormalize(${1:Vector4 v2}, ${2:float s})"},
		{ "trigger": "Geometry.Vector4.Maximize", "contents": "Geometry.Vector4.Maximize(${1:Vector4 v1})"},
		{ "trigger": "Geometry.Vector4.Minimize", "contents": "Geometry.Vector4.Minimize(${1:Vector4 v1})"},
		{ "trigger": "Geometry.Vector4.Normalize", "contents": "Geometry.Vector4.Normalize()"},
		{ "trigger": "Geometry.Vector4.To2D", "contents": "Geometry.Vector4.To2D()"},
		{ "trigger": "Geometry.Vector4.To3D", "contents": "Geometry.Vector4.To3D()"},
		{ "trigger": "Geometry.Vector4.To4D", "contents": "Geometry.Vector4.To4D()"},
		{ "trigger": "Geometry.Vector4.ProjectOnLine", "contents": "Geometry.Vector4.ProjectOnLine(${1:Vector4 a}, ${2:Vector4 b})"},
		{ "trigger": "Geometry.Vector4.ProjectOnLineSegment", "contents": "Geometry.Vector4.ProjectOnLineSegment(${1:Vector4 a}, ${2:Vector4 b})"},
		{ "trigger": "Geometry.Vector4.Rotate", "contents": "Geometry.Vector4.Rotate(${1:float s})"},
		{ "trigger": "Geometry.Vector4.RotateDeg", "contents": "Geometry.Vector4.RotateDeg(${1:float s})"},
		{ "trigger": "Geometry.Vector4.Scale", "contents": "Geometry.Vector4.Scale(${1:float s})"},
		{ "trigger": "Geometry.Vector4.ToPoint", "contents": "Geometry.Vector4.ToPoint(${1:int x=0})"},
		{ "trigger": "Geometry.Vector4.ToTable", "contents": "Geometry.Vector4.ToTable()"},
		{ "trigger": "Geometry.Vector4.Transform", "contents": "Geometry.Vector4.Transform(${1:Matrix4 m})"},
		{ "trigger": "Geometry.Vector4.TransformCoord", "contents": "Geometry.Vector4.TransformCoord(${1:Matrix4 m})"},
		{ "trigger": "Geometry.Vector4.TransformNormal", "contents": "Geometry.Vector4.TransformNormal(${1:Matrix4 m})"},
		{ "trigger": "Geometry.Vector4.unpack", "contents": "Geometry.Vector4.unpack()"},
		{ "trigger": "Geometry.Vector4.BoundingSphere", "contents": "Geometry.Vector4.BoundingSphere(${1:object o})"},
		{ "trigger": "Geometry.Vector4.Copy", "contents": "Geometry.Vector4.Copy(${1:Vector4 v})"},
// Graphics
		{ "trigger": "Graphics.ARGB", "contents": "Graphics.ARGB(${1:int transparency}, ${2:int red}, ${3:int green}, ${4:int blue})" },
		{ "trigger": "Graphics.DrawLine", "contents": "Graphics.DrawLine(${1:Vector2 arg1}, ${2:Vector2 arg2}, ${3:float arg3}, ${4:Color arg4})" },
		{ "trigger": "Graphics.DrawLines", "contents": "Graphics.DrawLines(${1:object arg1}, ${2:float arg2}, ${3:Color arg3})" },
		{ "trigger": "Graphics.DrawRectangle", "contents": "Graphics.DrawRectangle(${1:long arg1}, ${2:long arg2}, ${3:long arg3}, ${4:long arg4}, ${5:unsinged long arg5})" },
		{ "trigger": "Graphics.DrawRectangleFilled", "contents": "Graphics.DrawRectangleFilled(${1:Vector2 arg1}, ${2:long arg2}, ${3:long arg3}, ${4:unsinged long arg4})" },
		{ "trigger": "Graphics.DrawText", "contents": "Graphics.DrawText(${1:string text}, ${2:unsinged int fontSize}, ${3:unsinged int x}, ${4:unsinged int y}, ${5:int color})" },
		{ "trigger": "Graphics.RGB", "contents": "Graphics.RGB(${1:unsigned char red}, ${2:unsigned char green}, ${3:unsinged char blue})" },
		{ "trigger": "Graphics.RGBA", "contents": "Graphics.RGBA(${1:unsinged char red}, ${2:unsinged char green}, ${3:unsinged char blue}, ${4:unsinged char transparency})" },
// Graphics - Color
		{ "trigger": "Graphics.Color.AdjustContrast", "contents": "Graphics.Color.AdjustContrast(${1:float arg2})" },
		{ "trigger": "Graphics.Color.AdjustSaturation", "contents": "Graphics.Color.AdjustSaturation(${1:float arg2})" },

		{ "trigger": "Graphics.Color.Lerp", "contents": "Graphics.Color.Lerp(${1:Color arg2}, ${2:float arg3})" },
		{ "trigger": "Graphics.Color.Modulate", "contents": "Graphics.Color.Modulate(${1:Color arg2})" },
		{ "trigger": "Graphics.Color.Negative", "contents": "Graphics.Color.Negative()" },
		{ "trigger": "Graphics.Color.Scale", "contents": "Graphics.Color.Scale(${1:float arg2})" },
		{ "trigger": "Graphics.Color.BLACK", "contents": "Graphics.Color.BLACK" },
		{ "trigger": "Graphics.Color.BLUE", "contents": "Graphics.Color.BLUE" },
		{ "trigger": "Graphics.Color.CYAN", "contents": "Graphics.Color.CYAN" },
		{ "trigger": "Graphics.Color.GREEN", "contents": "Graphics.Color.GREEN" },
		{ "trigger": "Graphics.Color.GREY", "contents": "Graphics.Color.GREY" },
		{ "trigger": "Graphics.Color.MAGENTA", "contents": "Graphics.Color.MAGENTA" },
		{ "trigger": "Graphics.Color.RED", "contents": "Graphics.Color.RED" },
		{ "trigger": "Graphics.Color.WHITE", "contents": "Graphics.Color.WHITE" },
		{ "trigger": "Graphics.Color.YELLOW", "contents": "Graphics.Color.YELLOW" },
		{ "trigger": "Graphics.Color.TRANSPARENT", "contents": "Graphics.Color.TRANSPARENT" },
// Keyboard
		{ "trigger": "Keyboard.GetKey", "contents": "Keyboard.GetKey(${1:string arg1})" },
		{ "trigger": "Keyboard.IsKeyDown", "contents": "Keyboard.IsKeyDown(${1:int arg1})" },
		{ "trigger": "Keyboard.IsKeyPressed", "contents": "Keyboard.IsKeyPressed(${1:int arg1})" },
		{ "trigger": "Keyboard.ToAscii", "contents": "Keyboard.ToAscii(${1:int arg1})" },
// Memory
		{ "trigger": "Memory.GuessFncSize", "contents": "Memory.GuessFncSize(${1:unsinged long adress})" },
		{ "trigger": "Memory.PtrToStr", "contents": "Memory.PtrToStr(${1:unsinged long adress})" },
		{ "trigger": "Memory.ReadByte", "contents": "Memory.ReadByte(${1:unsinged long adress})" },
		{ "trigger": "Memory.ReadCall", "contents": "Memory.ReadCall(${1:unsinged long adress})" },
		{ "trigger": "Memory.ReadDword", "contents": "Memory.ReadDword(${1:unsinged long adress})" },
		{ "trigger": "Memory.ReadFloat", "contents": "Memory.ReadFloat(${1:unsinged long adress})" },
		{ "trigger": "Memory.ReadJump", "contents": "Memory.ReadJump(${1:unsinged long adress})" },
		{ "trigger": "Memory.ReadWord", "contents": "Memory.ReadWord(${1:unsinged long adress})" },
		{ "trigger": "Memory.WriteByte", "contents": "Memory.WriteByte(${1:unsinged long adress}, ${2:unsinged char value})" },
		{ "trigger": "Memory.WriteDword", "contents": "Memory.WriteDword(${1:unsinged long adress}, ${2:unsinged long value})" },
		{ "trigger": "Memory.WriteFloat", "contents": "Memory.WriteFloat(${1:unsinged long adress}, ${2:float value})" },
		{ "trigger": "Memory.WriteWord", "contents": "Memory.WriteWord(${1:unsinged long adress}, ${2:unsingned short value})" },
// Memory - MemoryBuffer
		{ "trigger": "Memory.MemoryBuffer.Read", "contents": "Memory.MemoryBuffer.Read()" },
		{ "trigger": "Memory.MemoryBuffer.ReadByte", "contents": "Memory.MemoryBuffer.ReadByte()" },
		{ "trigger": "Memory.MemoryBuffer.ReadChar", "contents": "Memory.MemoryBuffer.ReadChar()" },
		{ "trigger": "Memory.MemoryBuffer.ReadInt", "contents": "Memory.MemoryBuffer.ReadInt()" },
		{ "trigger": "Memory.MemoryBuffer.ReadShort", "contents": "Memory.MemoryBuffer.ReadShort()" },
		{ "trigger": "Memory.MemoryBuffer.ReadString", "contents": "Memory.MemoryBuffer.ReadString()" },
		{ "trigger": "Memory.MemoryBuffer.ReadUInt", "contents": "Memory.MemoryBuffer.ReadUInt()" },
		{ "trigger": "Memory.MemoryBuffer.ReadWord", "contents": "Memory.MemoryBuffer.ReadWord()" },
		{ "trigger": "Memory.MemoryBuffer.Write", "contents": "Memory.MemoryBuffer.Write(${1:unsinged char value})" },
		{ "trigger": "Memory.MemoryBuffer.WriteByte", "contents": "Memory.MemoryBuffer.WriteByte(${1:unsinged char value})" },
		{ "trigger": "Memory.MemoryBuffer.WriteChar", "contents": "Memory.MemoryBuffer.WriteChar(${1:char value})" },
		{ "trigger": "Memory.MemoryBuffer.WriteInt", "contents": "Memory.MemoryBuffer.WriteInt(${1:int value})" },
		{ "trigger": "Memory.MemoryBuffer.WriteShort", "contents": "Memory.MemoryBuffer.WriteShort(${1:short value})" },
		{ "trigger": "Memory.MemoryBuffer.WriteString", "contents": "Memory.MemoryBuffer.WriteString(${1:string value})" },
		{ "trigger": "Memory.MemoryBuffer.WriteUInt", "contents": "Memory.MemoryBuffer.WriteUInt(${1:unsinged int value})" },
		{ "trigger": "Memory.MemoryBuffer.WriteWord", "contents": "Memory.MemoryBuffer.WriteWord(${1:unsinged short value})" },
// Render
		{ "trigger": "Render.Add", "contents": "Render.Add(${1:CRenderObject arg1})" },
		{ "trigger": "Render.Remove", "contents": "Render.Remove(${1:CRenderObject arg1})" },
		{ "trigger": "Render.Font", "contents": "Render.Font(${1:string arg1}, ${2:unsigned int arg2})" },
		{ "trigger": "Render.DrawText", "contents": "Render.DrawText(${1:string arg1}, ${2:unsigned int arg2}, ${3:unsigned int arg3}, ${4:unsigned int arg4}, ${5:Color arg5})" },
// Render - Circle
		{ "trigger": "Render.Circle.Circle", "contents": "Render.Circle.Circle(${1:float x}, ${2:float y}, ${3:int radius}, ${4:int color})" },
		{ "trigger": "Render.Circle.Add", "contents": "Render.Circle.Add()" },
		{ "trigger": "Render.Circle.Draw", "contents": "Render.Circle.Draw()" },
		{ "trigger": "Render.Circle.Hide", "contents": "Render.Circle.Hide()" },
		{ "trigger": "Render.Circle.Remove", "contents": "Render.Circle.Remove()" },
		{ "trigger": "Render.Circle.Reset", "contents": "Render.Circle.Reset()" },
		{ "trigger": "Render.Circle.SetColor", "contents": "Render.Circle.SetColor(${1:unsigned long InnerColor}, ${2:unsigned long OuterColor})" },
		{ "trigger": "Render.Circle.SetPosition", "contents": "Render.Circle.SetPosition(${1:float x}, ${2:float y}, ${3:float z})" },
		{ "trigger": "Render.Circle.SetRadius", "contents": "Render.Circle.SetRadius(${1:int minRadius}, ${2:int maxRadius})" },
		{ "trigger": "Render.Circle.Show", "contents": "Render.Circle.Show()" },
// Render - Line
		{ "trigger": "Render.Line.Line", "contents": "Render.Line.Line(${1:Vector2/3 start}, ${2:Vector2/3 end}, ${3:float width}, ${4:unsigned long color})" },
		{ "trigger": "Render.Line.Add", "contents": "Render.Line.Add()" },
		{ "trigger": "Render.Line.Draw", "contents": "Render.Line.Draw(${1:unsigned int arg2}, ${2:unsigned int arg3})" },
		{ "trigger": "Render.Line.Hide", "contents": "Render.Line.Hide()" },
		{ "trigger": "Render.Line.Remove", "contents": "Render.Line.Remove()" },
		{ "trigger": "Render.Line.Reset", "contents": "Render.Line.Reset()" },
		{ "trigger": "Render.Line.Show", "contents": "Render.Line.Show()" },
// Render - Object
		{ "trigger": "Render.Object.Add", "contents": "Render.Object.Add()" },
		{ "trigger": "Render.Object.Hide", "contents": "Render.Object.Hide()" },
		{ "trigger": "Render.Object.Remove", "contents": "Render.Object.Remove()" },
		{ "trigger": "Render.Object.Reset", "contents": "Render.Object.Reset()" },
		{ "trigger": "Render.Object.Show", "contents": "Render.Object.Show()" },
// Render - Rect
		{ "trigger": "Render.Rect.Rect", "contents": "Render.Rect.Rect(${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:int color})" },
		{ "trigger": "Render.Rect.Add", "contents": "Render.Rect.Add()" },
		{ "trigger": "Render.Rect.Hide", "contents": "Render.Rect.Hide()" },
		{ "trigger": "Render.Rect.Remove", "contents": "Render.Rect.Remove()" },
		{ "trigger": "Render.Rect.Reset", "contents": "Render.Rect.Reset()" },
		{ "trigger": "Render.Rect.Show", "contents": "Render.Rect.Show()" },
// Render - Sprite
		{ "trigger": "Render.Sprite.Sprite", "contents": "Render.Sprite.Sprite(${1:unsigned long x}, ${2:unsigned long y})" },
		{ "trigger": "Render.Sprite.Add", "contents": "Render.Sprite.Add()" },
		{ "trigger": "Render.Sprite.Hide", "contents": "Render.Sprite.Hide()" },
		{ "trigger": "Render.Sprite.Remove", "contents": "Render.Sprite.Remove()" },
		{ "trigger": "Render.Sprite.Reset", "contents": "Render.Sprite.Reset()" },
		{ "trigger": "Render.Sprite.Show", "contents": "Render.Sprite.Show()" },
		{ "trigger": "Render.Sprite.Draw", "contents": "Render.Sprite.Draw(${1:Rect arg2}, ${2:Vector3 arg3}, ${3:Vector4 arg4})" },
		{ "trigger": "Render.Sprite.SetScale", "contents": "Render.Sprite.SetScale(${1:float xScale}, ${2:float yScale})" },
// Render - Text
		{ "trigger": "Render.Text.Text", "contents": "Render.Text.Text(${1:string fontName}, ${2:unsingned long dwSize}, ${3:unsingned long x}, ${4:unsingned long y}, ${5:CRenderFont font})" },
		{ "trigger": "Render.Text.Add", "contents": "Render.Text.Add()" },
		{ "trigger": "Render.Text.GetTextArea", "contents": "Render.Text.GetTextArea()" },
		{ "trigger": "Render.Text.Hide", "contents": "Render.Text.Hide()" },
		{ "trigger": "Render.Text.Remove", "contents": "Render.Text.Remove()" },
		{ "trigger": "Render.Text.Reset", "contents": "Render.Text.Reset()" },
		{ "trigger": "Render.Text.Show", "contents": "Render.Text.Show()" },
// Utility
		{ "trigger": "Utility.FileExists", "contents": "Utility.FileExists(${1:string sPath})" },
		{ "trigger": "Utility.GetModule", "contents": "Utility.GetModule(${1:string arg1})" },
		{ "trigger": "Utility.GetRegistryValue", "contents": "Utility.GetRegistryValue(${1:string arg1}, ${2:string arg2})" },
		{ "trigger": "Utility.GetSave", "contents": "Utility.GetSave(${1:string name})" },
		{ "trigger": "Utility.PlayFile", "contents": "Utility.PlayFile(${1:string name})" },
		{ "trigger": "Utility.ReadBinary", "contents": "Utility.ReadBinary(${1:string sPath})" },
		{ "trigger": "Utility.SetRegistryValue", "contents": "Utility.SetRegistryValue(${1:string arg1}, ${2:string arg1}, ${3:string arg1})" },
		{ "trigger": "Utility.WriteBinary", "contents": "Utility.WriteBinary(${1:string szPath}, ${2:MemoryBuffer buffer})" },
		{ "trigger": "Utility.ReadFile", "contents": "Utility.ReadFile(${1:string sPath})" },
		{ "trigger": "Utility.WriteFile", "contents": "Utility.WriteFile(${1:string szPath}, ${2:string text})" },
// Utility - Base64
		{ "trigger": "Utility.Base64.Encode", "contents": "Utility.Base64.Encode(${1:string rawString})" },
		{ "trigger": "Utility.Base64.Decode", "contents": "Utility.Base64.Decode(${1:string encodedString})" },
// Utility - AOBEntry
		{ "trigger": "Utility.AOBEntry.Get", "contents": "Utility.AOBEntry.Get(${1:unsigned long arg2})" },
// Utility - AOBScanner
		{ "trigger": "Utility.AOBScanner.AddAoB", "contents": "Utility.AOBScanner.AddAoB(${1:string arg2})" },
		{ "trigger": "Utility.AOBScanner.AddExport", "contents": "Utility.AOBScanner.AddExport(${1:string arg2})" },
		{ "trigger": "Utility.AOBScanner.AddString", "contents": "Utility.AOBScanner.AddString(${1:string arg2})" },
		{ "trigger": "Utility.AOBScanner.Get", "contents": "Utility.AOBScanner.Get(${1:unsigned int arg2})" },
		{ "trigger": "Utility.AOBScanner.Scan", "contents": "Utility.AOBScanner.Scan()" },
// Utility - WebView
		{ "trigger": "Utility.WebView.CreateObject", "contents": "Utility.WebView.CreateObject(${1:string arg2})" },
		{ "trigger": "Utility.WebView.GetObject", "contents": "Utility.WebView.GetObject(${1:string arg2}, ${2:string arg3})" },
		{ "trigger": "Utility.WebView.JQuery", "contents": "Utility.WebView.JQuery(${1:string arg2})" },
		{ "trigger": "Utility.WebView.LoadHome", "contents": "Utility.WebView.LoadHome()" },
		{ "trigger": "Utility.WebView.LoadUrl", "contents": "Utility.WebView.LoadUrl(${1:string arg2})" },
		{ "trigger": "Utility.WebView.RunJS", "contents": "Utility.WebView.RunJS(${1:string arg2})" },
		{ "trigger": "Utility.WebView.GetMain", "contents": "Utility.WebView.GetMain()" },
// Utility - JSObject
		{ "trigger": "Utility.JSObject.BeginInvoke", "contents": "Utility.JSObject.BeginInvoke(${1:string arg2}, ${2:object o})" },
		{ "trigger": "Utility.JSObject.GetProperty", "contents": "Utility.JSObject.GetProperty(${1:string arg2})" },
		{ "trigger": "Utility.JSObject.Invoke", "contents": "Utility.JSObject.Invoke(${1:string arg2}, ${2:object o})" },
		{ "trigger": "Utility.JSObject.SetCustomMethod", "contents": "Utility.JSObject.SetCustomMethod(${1:string arg2}, ${2:object o})" },
		{ "trigger": "Utility.JSObject.SetProperty", "contents": "Utility.JSObject.SetProperty(${1:string arg2}, ${2:object o})" },
// Window
		{ "trigger": "Window.GetCursorPos", "contents": "Window.GetCursorPos()" },
		{ "trigger": "Window.GetWindowPos", "contents": "Window.GetWindowPos()" },
// Window - Clipboard
		{ "trigger": "Window.Clipboard.GetText", "contents": "Window.Clipboard.GetText()" },
		{ "trigger": "Window.Clipboard.SetText", "contents": "Window.Clipboard.SetText(${1:string arg2})" },
// MenuConfig
		{ "trigger": "MenuConfig", "contents": "${1:NameOfMenu} = MenuConfig(${2:string ID}, ${2:string Name})" },
		{ "trigger": "MenuConfig:Boolean", "contents": "${1:NameOfMenu}:Boolean(${2:string ID}, ${3:string Name}, ${4:bool defaultValue}, ${5:function callback}, ${6:bool ForceDefault})" },
		{ "trigger": "MenuConfig:Button", "contents": "${1:NameOfMenu}:Button(${2:string ID}, ${3:string Name}, ${4:function callback})" },
		{ "trigger": "MenuConfig:ColorPick", "contents": "${1:NameOfMenu}:ColorPick(${2:string ID}, ${3:string Name}, ${4:string defaultValue}, ${5:function callback}, ${6:bool ForceDefault})" },
		{ "trigger": "MenuConfig:DropDown", "contents": "${1:NameOfMenu}:DropDown(${2:string ID}, ${3:string Name}, ${4:int defaultValue}, ${5:table DropTable}, ${6:function callback}, ${7:bool ForceDefault})" },
		{ "trigger": "MenuConfig:Info", "contents": "${1:NameOfMenu}:Info(${2:string ID}, ${3:string Name})" },
		{ "trigger": "MenuConfig:KeyBinding", "contents": "${1:NameOfMenu}:KeyBinding(${2:string ID}, ${3:string Name}, ${4:string Key}, ${5:function callback}, ${6:bool ForceDefault})" },
		{ "trigger": "MenuConfig:Menu", "contents": "${1:NameOfMenu}:Menu(${2:string ID}, ${3:string Name})" },
		{ "trigger": "MenuConfig:Number", "contents": "${1:NameOfMenu}:Number(${2:string ID}, ${3:string Name}, ${4:int DefaultValue}, ${5:int MinValue}, ${6:int MaxValue}, ${7:function callback}, ${8:bool ForceDefault})" },
		{ "trigger": "MenuConfig:Section", "contents": "${1:NameOfMenu}:Section(${2:string ID}, ${3:string Name})" },
		{ "trigger": "MenuConfig:Separator", "contents": "${1:NameOfMenu}:Separator()" },
		{ "trigger": "MenuConfig:Slider", "contents": "${1:NameOfMenu}:Slider(${2:string ID}, ${3:string Name}, ${4:int DefaultValue}, ${5:int MinValue}, ${6:int MaxValue}, ${8:int Step}, ${8:function callback}, ${9:bool ForceDefault})" },
		{ "trigger": "MenuConfig:TargetSelector", "contents": "${1:NameOfMenu}:TargetSelector(${2:string ID}, ${3:string Name}, ${4:int Mode}, ${5:int Range}, ${6:string DmgType}, ${8:bool FocusSelected}, ${8:bool OwnTeam})" },

	]
}
